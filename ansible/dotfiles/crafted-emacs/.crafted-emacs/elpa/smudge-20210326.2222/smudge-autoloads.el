;;; smudge-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from smudge.el

(autoload 'smudge-track-search "smudge" "\
Search for tracks that match the given QUERY string.

(fn QUERY)" t)
(autoload 'smudge-playlist-search "smudge" "\
Search for playlists that match the given QUERY string.

(fn QUERY)" t)
(autoload 'smudge-recently-played "smudge" "\
Display recently played tracks." t)
(autoload 'smudge-my-playlists "smudge" "\
Display the current user's playlists." t)
(autoload 'smudge-user-playlists "smudge" "\
Display the public playlists of the given user with USER-ID.

(fn USER-ID)" t)
(autoload 'smudge-featured-playlists "smudge" "\
Display Spotify's featured playlists." t)
(autoload 'smudge-create-playlist "smudge" "\
Create an empty playlist owned by the current user.
Prompt for the NAME and whether it should be made PUBLIC.

(fn NAME PUBLIC)" t)
(autoload 'smudge-select-device "smudge" "\
Allow for the selection of a device via Spotify Connect for transport functions." t)
(register-definition-prefixes "smudge" '("smudge-"))


;;; Generated autoloads from smudge-api.el

(register-definition-prefixes "smudge-api" '("smudge-"))


;;; Generated autoloads from smudge-apple.el

(register-definition-prefixes "smudge-apple" '("smudge-"))


;;; Generated autoloads from smudge-connect.el

(register-definition-prefixes "smudge-connect" '("smudge-connect-"))


;;; Generated autoloads from smudge-controller.el

(register-definition-prefixes "smudge-controller" '("smudge-"))


;;; Generated autoloads from smudge-dbus.el

(register-definition-prefixes "smudge-dbus" '("smudge-dbus-"))


;;; Generated autoloads from smudge-device-select.el

(register-definition-prefixes "smudge-device-select" '("smudge-"))


;;; Generated autoloads from smudge-playlist.el

(register-definition-prefixes "smudge-playlist" '("smudge-playlist-"))


;;; Generated autoloads from smudge-remote.el

(defvar global-smudge-remote-mode nil "\
Non-nil if Global Smudge-Remote mode is enabled.
See the `global-smudge-remote-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-smudge-remote-mode'.")
(custom-autoload 'global-smudge-remote-mode "smudge-remote" nil)
(autoload 'global-smudge-remote-mode "smudge-remote" "\
Toggles Smudge Remote mode.

A positive prefix argument enables the mode, any other prefix
argument disables it. From Lisp, argument omitted or nil enables
the mode, `toggle' toggles the state.

When Smudge Remote mode is enabled, it's possible to toggle
the repeating and shuffling status of the running Spotify process.
See commands \\[smudge-toggle-repeating] and
\\[smudge-toggle-shuffling].

This is a global minor mode.  If called interactively, toggle the
`Global Smudge-Remote mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='global-smudge-remote-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "smudge-remote" '("smudge-"))


;;; Generated autoloads from smudge-track.el

(register-definition-prefixes "smudge-track" '("smudge-track-"))

;;; End of scraped data

(provide 'smudge-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; smudge-autoloads.el ends here
